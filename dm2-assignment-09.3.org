#+TITLE: DM2 Assignment 09.3
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"generic-instructions.org")][Read Instructions]]
[[elisp:(progn%20(save-buffer)%20(browse-url-of-file%20(org-html-export-to-html)))][Export to HTML and Browse]]
[[elisp:(progn%20(save-buffer)%20(org-clock-report%201)%20(save-buffer))][Insert/Update Clock Summary Report]]
* TODO Explore Huffman Trees and Huffman Codes
  Your task is to compress a /special piece of information/ as compactly as
  possible, *give its encoding* and *calculate its compression ratio*.

  Recall that the *compression ratio* of an encoding is the percentage
  \(\frac{(f - v)}{f} \times 100\), where /f/ is the number of bits per symbol of the
  smallest *fixed*-length encoding, and /v/ is the average number of bits per
  symbol with the Huffman encoding.

  For example, if there were 9 different symbols in a message, \(f=4\) is the
  number of bits of the smallest fixed-length encoding, because 2^3 = 8 (not
  enough for 9) and 2^4 = 16 (enough and to spare). If the Huffman encoding of
  the message had \(v=3.12\), the compression ratio would be

  \(\frac{4 - 3.12}{4} \times 100\ \approx 22\%.\)

  The /special piece of information/ you are tasked to compress is a list of the
  first ten million primes. This is a list that starts

  |  2 |
  |  3 |
  |  5 |
  |  7 |
  | 11 |
  | 13 |
  | 17 |
  | 19 |
  | 23 |
  | 29 |

  and ends

  | 179424551 |
  | 179424571 |
  | 179424577 |
  | 179424601 |
  | 179424611 |
  | 179424617 |
  | 179424629 |
  | 179424667 |
  | 179424671 |
  | 179424673 |

  As ASCII text stored in a file with one prime per line, the size of this data
  file is slightly over 89 megabytes. The goal is to compress this down to just
  over 5 megabytes (5589056 bytes, to be exact). That\rsquo{}s a 94% compression ratio!

  Standard compression tools can only get about a 73% compression ratio for this
  ASCII data. A more clever approach is needed. Instead of compressing the list
  of prime numbers, compress a list of the /gaps/ between them!

  It doesn\rsquo{}t save much, just the unique (occurring only once) gap size of 1
  between 2 and 3, but in the spirit of de Polignac\rsquo{}s conjecture that every
  /even/ number appears infinitely often as a gap between consecutive primes,
  just consider the even-sized gaps. The result will be a list that starts with
  2 (the difference between 5 and 3), 2 (the difference between 7 and 5), 4 (the
  difference between 11 and 7), 2 (the difference between 13 and 11), 4 (the
  difference between 17 and 13), 2 (the difference between 19 and 17), 4 (the
  difference between 23 and 19), and 6 (the difference between 29 and 23).

  Generating this data is the first task. The algorithm for doing so is very
  straightforward:

  1. Find the gaps between consecutive odd primes.
  2. Store these gaps as a list of even numbers.

  Tabulating the results, the first ten gaps are as follows, where the last
  column is the list to keep:

  |  5 | - |  3 | = | 2 |
  |  7 | - |  5 | = | 2 |
  | 11 | - |  7 | = | 4 |
  | 13 | - | 11 | = | 2 |
  | 17 | - | 13 | = | 4 |
  | 19 | - | 17 | = | 2 |
  | 23 | - | 19 | = | 4 |
  | 29 | - | 23 | = | 6 |
  | 31 | - | 29 | = | 2 |
  | 37 | - | 31 | = | 6 |

  And the last ten:

  | 179424551 | - | 179424533 | = | 18 |
  | 179424571 | - | 179424551 | = | 20 |
  | 179424577 | - | 179424571 | = |  6 |
  | 179424601 | - | 179424577 | = | 24 |
  | 179424611 | - | 179424601 | = | 10 |
  | 179424617 | - | 179424611 | = |  6 |
  | 179424629 | - | 179424617 | = | 12 |
  | 179424667 | - | 179424629 | = | 38 |
  | 179424671 | - | 179424667 | = |  4 |
  | 179424673 | - | 179424671 | = |  2 |

  As a check, see if the generated list of gaps has length 9999998.

  The next step is to count how many times each gap size occurs, so that for the
  Huffman encoding scheme, the larger the frequency of occurrence, the smaller
  the number of bits encoding that gap size.

  As a correctness check, here are the first ten gap counts:

  | Gap |   Count |
  |-----+---------|
  |   2 |  738597 |
  |   4 |  738717 |
  |   6 | 1297540 |
  |   8 |  566151 |
  |  10 |  729808 |
  |  12 |  920661 |
  |  14 |  503524 |
  |  16 |  371677 |
  |  18 |  667734 |
  |  20 |  354267 |

  And the last ten:

  | Gap | Count |
  |-----+-------|
  | 190 |     1 |
  | 192 |     3 |
  | 194 |     1 |
  | 196 |     1 |
  | 198 |     6 |
  | 202 |     2 |
  | 204 |     3 |
  | 210 |     4 |
  | 220 |     1 |
  | 222 |     1 |

  Note two things from these partial gap counts:

  1. Small even numbers (< 100) are well represented, larger ones (< 1000) less
     so.
  2. Ten million primes aren\rsquo{}t enough to have /every/ even number represented;
     for example, 200, 206, 208, 212, 214, 216 and 218 do not appear even once.

* TODO Calculate Size of File
  Imagine evaluating the following two code blocks:
#+BEGIN_SRC elisp :results silent
  (require 'first-ten-million-primes)

  (defun create-ascii-file-of-first-ten-million-primes ()
    (with-temp-buffer
      (mapc (lambda (n) (insert (format "%d\n" n))) first-ten-million-primes)
      (write-region nil 0 "first-ten-million-primes.txt")))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (create-ascii-file-of-first-ten-million-primes)
#+END_SRC

  Strictly speaking, it is not necessary to create this file in order to
  calculate its size. How? What would its size be? (Knowing this size is useful
  for compression ratio comparison.)

* TODO Study and Extend Some Sample Code
  As you are required to build an elisp-structured Huffman tree that can
  compress the list of primes, use the following code block as a guide and a
  starting point. You are given code for creating a list of gaps between the
  first ten million primes, and for restoring a list (not a vector) of the first
  ten million primes from that list of gaps.

  This code also shows a possible implementation of a tree node as a symbol. The
  symbol\rsquo{}s value is the node\rsquo{}s value. The symbol\rsquo{}s plist (property list) is used
  for storing \ldquo{}pointers\rdquo to left and right children, and parent.

#+BEGIN_SRC elisp :results silent
  (require 'cl)

  (require 'first-ten-million-primes)

  (defun list-the-gaps ()
    "Create a list of the gaps between the first ten million primes.
     Depends on the first-ten-million-primes vector."
    (loop with curr = 0
          with prev = 3
          with gap = 0
          for i from 2 upto (1- (length first-ten-million-primes))
          do (setq curr (elt first-ten-million-primes i)
                   gap (- curr prev)
                   prev curr)
          collect gap))

  (defun restore-primes (list-of-gaps)
    "Given the list of gaps starting at the gap between 3 and 5
       return a list of the first ten million primes."
    (cons 2 (cons 3 (loop for gap in list-of-gaps with prime = 3
                          collect (incf prime gap)))))

  (setq node-counter 0)

  (defun make-node ()
    (let ((symbol (make-symbol (concat "n" (number-to-string node-counter)))))
      (set symbol node-counter)
      (incf node-counter)
      symbol))

  (defun get-value (node)
    (and (symbolp node) (symbol-value node)))

  (defun set-value (node new-value)
    (and (symbolp node) (set node new-value)))

  (defun get-parent (node)
    (and (symbolp node) (get node :parent)))

  (defun set-parent (node parent)
    (and (symbolp node) (symbolp parent) (put node :parent parent)))

  (defun get-left (node)
    (and (symbolp node) (get node :left)))

  (defun set-left (node left)
    (and (symbolp node) (symbolp left) (put node :left left)))

  (defun get-right (node)
    (and (symbolp node) (get node :right)))

  (defun set-right (node right)
    (and (symbolp node) (symbolp right) (put node :right right)))

  (defun build-tree (height)
    (let ((root (make-node)))
      (if (> height 0)
          (let ((left (build-tree (1- height)))
                (right (build-tree (1- height))))
            (set-left root left)
            (set-right root right)
            (set-parent left root)
            (set-parent right root)))
      root))
#+END_SRC

* My Report


** Explore Huffman Trees and Huffman Codes
*** Make-Frequency-Table

#+BEGIN_SRC elisp

  (setq list-of-gaps (list-the-gaps)
        len (length list-of-gaps))

#+END_SRC

#+RESULTS:
: 9999998

#+BEGIN_SRC elisp
   (subseq list-of-gaps 9999988) 
#+END_SRC

#+RESULTS:
| 18 | 20 | 6 | 24 | 10 | 6 | 12 | 38 | 4 | 2 |

--> Here is the function that was requested.
#+name: make-frequency-table
#+BEGIN_SRC elisp :results silent

  (defun make-frequency-table (lst-of-gaps)
    "Make it!"
    (let ((freq-table (make-hash-table)))
      (loop for gap in lst-of-gaps
            do (incf (gethash gap freq-table 0)))
    freq-table))
#+END_SRC

-> Set the hashmap as a global value
#+BEGIN_SRC elisp :results silent
  (setq f-table (make-frequency-table list-of-gaps))   
#+END_SRC

-> Here it is!
#+BEGIN_SRC elisp
  f-table
#+END_SRC

#+RESULTS:
: #s(hash-table size 145 test eql rehash-size 1.5 rehash-threshold 0.8125 data (2 738597 4 738717 6 1297540 8 566151 14 503524 10 729808 12 920661 18 667734 20 354267 22 307230 34 129043 24 453215 16 371677 26 211203 28 229177 30 398713 32 123123 36 206722 44 64866 42 159956 40 111546 52 38800 48 93693 38 94682 72 17255 50 52183 62 16763 54 64157 60 55305 58 27985 46 54931 56 32224 64 17374 68 12368 86 3411 66 30960 70 17475 78 13758 76 7253 82 4791 96 3544 112 711 100 1923 74 8540 90 7056 84 9818 114 1125 80 6760 88 3454 98 1831 92 2259 106 933 94 2058 118 433 132 301 104 1168 102 2374 110 941 126 533 120 948 148 67 108 1634 122 287 138 210 128 183 154 43 130 211 116 439 146 46 136 100 124 318 134 128 140 140 152 52 142 90 144 123 150 94 180 10 156 57 164 20 210 4 170 18 160 27 182 5 168 25 176 11 172 4 162 27 178 12 198 6 220 1 158 19 174 10 196 1 184 4 166 9 202 2 204 3 222 1 192 3 188 1 190 1 186 3 194 1))

-> How to get a value from the hashmap
#+BEGIN_SRC elisp
  (gethash 2 f-table 0)
#+END_SRC

#+RESULTS:
: 738597

-> This is it in a Table. (List of Lists (LoL)).
#+name: f-table-func
#+BEGIN_SRC elisp :results silent

  (defun second-elt-zerop (L)
    (zerop (nth 1 L)))


  (defun make-freq-LoL ()
    (remove-if 'second-elt-zerop
      (loop for i from 2 upto 250
            collect (list i (gethash i f-table 0)))))

#+END_SRC

#+name: f-org-table
#+BEGIN_SRC elisp
  (setq freq-table (make-freq-LoL))
#+END_SRC

#+RESULTS: f-org-table
|   2 |  738597 |
|   4 |  738717 |
|   6 | 1297540 |
|   8 |  566151 |
|  10 |  729808 |
|  12 |  920661 |
|  14 |  503524 |
|  16 |  371677 |
|  18 |  667734 |
|  20 |  354267 |
|  22 |  307230 |
|  24 |  453215 |
|  26 |  211203 |
|  28 |  229177 |
|  30 |  398713 |
|  32 |  123123 |
|  34 |  129043 |
|  36 |  206722 |
|  38 |   94682 |
|  40 |  111546 |
|  42 |  159956 |
|  44 |   64866 |
|  46 |   54931 |
|  48 |   93693 |
|  50 |   52183 |
|  52 |   38800 |
|  54 |   64157 |
|  56 |   32224 |
|  58 |   27985 |
|  60 |   55305 |
|  62 |   16763 |
|  64 |   17374 |
|  66 |   30960 |
|  68 |   12368 |
|  70 |   17475 |
|  72 |   17255 |
|  74 |    8540 |
|  76 |    7253 |
|  78 |   13758 |
|  80 |    6760 |
|  82 |    4791 |
|  84 |    9818 |
|  86 |    3411 |
|  88 |    3454 |
|  90 |    7056 |
|  92 |    2259 |
|  94 |    2058 |
|  96 |    3544 |
|  98 |    1831 |
| 100 |    1923 |
| 102 |    2374 |
| 104 |    1168 |
| 106 |     933 |
| 108 |    1634 |
| 110 |     941 |
| 112 |     711 |
| 114 |    1125 |
| 116 |     439 |
| 118 |     433 |
| 120 |     948 |
| 122 |     287 |
| 124 |     318 |
| 126 |     533 |
| 128 |     183 |
| 130 |     211 |
| 132 |     301 |
| 134 |     128 |
| 136 |     100 |
| 138 |     210 |
| 140 |     140 |
| 142 |      90 |
| 144 |     123 |
| 146 |      46 |
| 148 |      67 |
| 150 |      94 |
| 152 |      52 |
| 154 |      43 |
| 156 |      57 |
| 158 |      19 |
| 160 |      27 |
| 162 |      27 |
| 164 |      20 |
| 166 |       9 |
| 168 |      25 |
| 170 |      18 |
| 172 |       4 |
| 174 |      10 |
| 176 |      11 |
| 178 |      12 |
| 180 |      10 |
| 182 |       5 |
| 184 |       4 |
| 186 |       3 |
| 188 |       1 |
| 190 |       1 |
| 192 |       3 |
| 194 |       1 |
| 196 |       1 |
| 198 |       6 |
| 202 |       2 |
| 204 |       3 |
| 210 |       4 |
| 220 |       1 |
| 222 |       1 |

*** Make-Node-List-From-Table

-> Loop over with just keys
#+BEGIN_SRC elisp :results silent
  (loop for k being the hash-key of f-table collect k )
#+END_SRC

-> Sorted version
#+BEGIN_SRC elisp :results silent
  (sort 
    (loop for k being the hash-key of f-table collect k )
   '<)
#+END_SRC

--> Example of maphash function
#+BEGIN_SRC elisp :results silent
  (maphash (lambda (key val)
            (list "cstring" key val))
   f-table)
#+END_SRC

--> Example of looping over both KEYS and VALUES
#+BEGIN_SRC elisp :results silent
  (loop for key being the hash-keys of f-table 
        using (hash-value value)
        collect (list key value))
#+END_SRC

--> Let's make the list of nodes! 
(We do it in a let here first for experimentation.)
#+BEGIN_SRC elisp :results silent

  ;; Set node-counter to 0 so that the nodes 
  ;; have n0+ names rather than much larger ones.
  (setq node-counter 0)

  ;; Here is a let that we will probably change into
  ;; a  function soon.
  (setq exp-node-list (let* ((ft f-table))
    (loop for key being the hash-keys of ft 
          using (hash-value value)
          collect (let* ((k key)
                         (v value)
                         (new-node (make-node)))
                        (set-value new-node v)
                        ;; set the gap-length (of the node) in the node's plist
                        (put new-node :gap-length k)
                        ;; set the frequency (of the node) in the node's plist
                        (put new-node :frequency v)
                        new-node
                    )
          )
    ))

  ;;;; PSEUDOCODE FOR WHAT I DID.
  ;; loop over all the keys and values..
  ;; collect -> let.. 
  ;; let inside loop
    ;; put let 
    ;; make a new node
    ;; ?? set its value to be the frequency (so that it can be easily sorted by it???)
    ;; set the gap-length (of the node) in the node's plist
    ;; set the frequency (of the node) in the node's plist
    ;; return that node to the end of the let.


#+END_SRC

-> play with exp-node-list to see if the plist got set right.
#+BEGIN_SRC elisp :results code

  ;(symbol-plist (nth 0 exp-node-list)) ;-> Works. Has :gap-length and :frequency
  ;(get-value (nth 0 exp-node-list)) ;-> Works! gets 738597 or whatever it is for 2
  (nth 0 exp-node-list) ;-> "n0" or n0 depending on the ouptut
  
#+END_SRC

---> Here is the actual Function make-node-list-from-table
#+BEGIN_SRC elisp :results silent
  (defun make-node-list-from-table (ft)
    ""
    (setq node-counter 0)
    (loop for key being the hash-keys of ft 
          using (hash-value value)
          collect (let* ((k key)
                         (v value)
                         (new-node (make-node)))
                    (set-value new-node v)
                    ;; set the gap-length (of the node) in the node's plist
                    (put new-node :gap-length k)
                    ;; set the frequency (of the node) in the node's plist
                    (put new-node :frequency v)
                    new-node
                    )
          )
    )

#+END_SRC

#+BEGIN_SRC elisp
  (setq list-of-nodes (make-node-list-from-table f-table))
#+END_SRC

#+RESULTS:
| n0 | n1 | n2 | n3 | n4 | n5 | n6 | n7 | n8 | n9 | n10 | n11 | n12 | n13 | n14 | n15 | n16 | n17 | n18 | n19 | n20 | n21 | n22 | n23 | n24 | n25 | n26 | n27 | n28 | n29 | n30 | n31 | n32 | n33 | n34 | n35 | n36 | n37 | n38 | n39 | n40 | n41 | n42 | n43 | n44 | n45 | n46 | n47 | n48 | n49 | n50 | n51 | n52 | n53 | n54 | n55 | n56 | n57 | n58 | n59 | n60 | n61 | n62 | n63 | n64 | n65 | n66 | n67 | n68 | n69 | n70 | n71 | n72 | n73 | n74 | n75 | n76 | n77 | n78 | n79 | n80 | n81 | n82 | n83 | n84 | n85 | n86 | n87 | n88 | n89 | n90 | n91 | n92 | n93 | n94 | n95 | n96 | n97 | n98 | n99 | n100 | n101 | n102 | n103 |

*** Make-Huffman-Tree

--> Example initialization steps in the Textbook.
#+BEGIN_SRC elisp
(setq symbols [A B C D E F]
      frequencies [0.08 0.10 0.12 0.15 0.20 0.35]
      syms-freqs-as-list-of-pairs
        (mapcar* 'cons symbols frequencies)
      syms-freqs-as-vector-of-vectors
        (map 'vector (lambda (x y) (vector x y)) symbols frequencies)
      display (list (list syms-freqs-as-list-of-pairs)
                    (list syms-freqs-as-vector-of-vectors)))

#+END_SRC

#+RESULTS:
| ((A . 0.08) (B . 0.1) (C . 0.12) (D . 0.15) (E . 0.2) (F . 0.35)) |
| [[A 0.08] [B 0.1] [C 0.12] [D 0.15] [E 0.2] [F 0.35]]             |

NOTES FROM the Textbook:
- Just to re-affirm, higher-frequency nodes (gaps) should be near the top
  (root) of the tree. 

-> A repeated block to make it easy to re=evaluate this ...
#+BEGIN_SRC elisp :results silent
#+END_SRC
#+BEGIN_SRC elisp :results silent


  ;;;; PSEUDOCODE ==> Supplied by Bro Neff in textbook.
  ;; 
  ;; Algorithm Huffman Tree (inputs and initialization of Q as above)
  ;; while Q has more than one element do
  ;;    TL ← the minimum-weight tree in Q
  ;;    Delete the minimum-weight tree in Q
  ;;    TR ← the minimum-weight tree in Q
  ;;    Delete the minimum-weight tree in Q
  ;;    Create a new tree T with TL and TR as its left and right subtrees,
  ;;    and weight equal to the sum of TL’s weight and TR’s weight.
  ;;    Insert T into Q.
  ;; return T

  ;;;; PSEUDOCODE ==> In my Words
  ;; Sort list of nodes by frequency (big in 'front', small in 'back')
  ;; Treat the list as a queue
  ;; Go/Loop from the front to the back AND...
  ;; WHILE Q has MORE THAN 1 (ONE) element, DO
    ;; SORT again the Q
    ;; Tree-Left = front
    ;; delete off front
    ;; Tree-Right = front
    ;; delete off front
    ;; ** CREATE a new Tree T with TL and TR as its left and right subtrees,
    ;; and weight equal to the sum of TL's weight and TR's weight.
    ;; Insert T into Q (it will be sorted by next time..)
  ;; Return T (Q's first and only element?)

  (defun sym-greater-than (n1 n2)
    (and (symbolp n1) (symbolp n2)
      (< (get-value n1) (get-value n2))))

  (defun make-huffman-tree (lst-of-nodes) 
    (let* ((Q lst-of-nodes)
           (x t)
           (T nil)
           (TL nil)
           (TR nil)
           (sum 0))
      (while (> (length Q) 1)
        (setq Q (sort Q 'sym-greater-than)) 
        (setq TL (car Q))
        (pop Q)
        (setq TR (car Q))
        (pop Q)
        (setq T (make-node)) ;; could use intern.. ??
        (set-value T
                   (+ (get-value TL)
                      (get-value TR)))
        (set-left T TL)
        (set-right T TR)
        (set-parent TL T)
        (set-parent TR T)
        (setq Q (cons T Q))
        ;;(setq sum (+ 1 sum)) ;; count how many iterations we get through..
        )

      (car Q)))

#+END_SRC
#+BEGIN_SRC elisp
  ;; we will redo the list-of-nodes (which restarts the node-counter.
  (setq list-of-nodes (make-node-list-from-table f-table))
  (setq huffman-tree (make-huffman-tree list-of-nodes))
#+END_SRC
#+RESULTS:
: n206
n206 
(symbol-value n206) 
(symbol-value huffman-tree) 9999998
(symbol-plist huffman-tree) (:left n204 :right n205)

*** Get-A-Gap-Code-Table

#+BEGIN_SRC elisp :results silent

  ;;;; PSEUDOCODE
  ;; ==> get h-tree, return list of codes (gap . code)
  ;; traverse the tree....
  ;; build the code...
  ;; START with an empty string.
  ;; traverse the tree (recursive)
  ;; Add 0's when you go LEFT, 
  ;; Add 1's when you go RIGHT,
  ;; GENERATE A BIT STRING FOR EVERY LEAF-NODE (not  (AND ADD TO THE LIST)

  (defun get-a-gap-code-table (htree-root)
    ""
    nil)

  (let* ((nodes list-of-nodes))
    (loop for node in nodes
     collect 
       (list (get-value node)
             (symbol-plist node)
             )))

#+END_SRC

-> This is the usage..
#+BEGIN_SRC elisp
  (setq gap-code-table (get-a-gap-code-table huffman-tree))
#+END_SRC

#+RESULTS:


--> Recursion Practice
#+BEGIN_SRC elisp
  (defun rec-ess 
#+END_SRC

-->maphash practice
#+BEGIN_SRC elisp
  (
#+END_SRC


** Calculate Size of File


** Study and Extend Some Sample Code


** Thoughts We Had


** Connections We Made

   I was first exposed to Huffman Codes in CS235.
   I thought that it was very cool. I'll probably go 
   review my notes and code there to help me remember
   how they work.

** Contributors

   - Sean Conley
   - Grayson
   - Taylor
   - Luke
   - Bro Neff


* TODO What Is True?
   This is a tool that allows you to assess yourself on how you did
   with this assignment. Check a box (using , ,) if warranted.

   What is true of my experience in general?
#+name: assertions-in-general
  - [X] I had fun.
  - [X] I collaborated with one or more classmates.
  - [X] I learned something new.
  - [X] I achieved something meaningful, or something I can build upon at a
    later time.

   What is true of my report on what I learned?
#+name: assertions-about-report
  - [ ] I wrote a sufficient number of well-written sentences.
  - [ ] I reported what I thought about while doing the problems.
  - [ ] I reported on any connections I found between these problems and
    something I already know.
  - [ ] I reported who were and what contribution each of my collaborators made.
  - [ ] I reported on *three different* compression ratios (see assertions about
    answers).

   What is true of the \ldquo{}mechanical infelicities\rdquo (misspelled words, grammatical
   errors, punctuation errors) in my report of what I learned?
#+name: assertions-about-MIs
  - [ ] There are fewer than four.
  - [ ] There are fewer than three.
  - [ ] There are fewer than two.
  - [ ] There are none.

#+name: assertions-about-answers
  - [X] I wrote an elisp function to make-frequency-table that takes a
    list-of-gaps and populates the data structure created by
    =(make-hash-table)=.
  - [X] I wrote an elisp function to make-node-list-from-table that takes the
    table-of-frequencies and returns a list of nodes.
  - [X] I wrote an elisp function to make-huffman-tree that takes the
    list-of-nodes and returns a Huffman tree.
  - [ ] I wrote an elisp function to get-a-gap-code-table that takes a Huffman
    tree (or a list-of-nodes) and returns a code-list as a list of (gap . code)
    cons cells.
  - [ ] I wrote an elisp function to encode the data given the list-of-gaps and
    the code-list.
  - [ ] I wrote an elisp function to encapsulate the above-mentioned elisp
    functions (in order) in one encode-first-ten-million-primes function that
    takes no parameters.
  - [ ] I correctly calculated the number of keys in the hashtable of gap sizes.
  - [ ] I correctly calculated the number of bits per key with a fixed encoding.
  - [ ] I correctly calculated the total number of bits encoded with the Huffman
    encoding.
  - [ ] I correctly calculated the total number of bits encoded with the fixed
    encoding.
  - [ ] I correctly calculated the compression ratio from this fixed encoding.
  - [ ] I correctly calculated the size of the first ten million primes encoded
    as 32-bit integer binary data.
  - [ ] I correctly calculated the compression ratio from the binary size.
  - [ ] I correctly calculated the size of the first ten million primes encoded
    as ASCII data.
  - [ ] I correctly calculated the compression ratio from the ASCII size (just
    the primes, nothing else).

#+BEGIN_SRC elisp
; (org-sbe "time-for-fun.org:calculate-score")

  (calculate-score
   (quote
    ((in-general 1 1 2 2)
     (about-report 5 5 5 5 6)
     (about-MIs 2 2 2 2)
     (about-answers 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4))))
#+END_SRC
